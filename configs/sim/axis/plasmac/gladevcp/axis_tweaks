'''
to set the Axis window size, uncomment the below lines and
change pad_width and pad_height to suit your setup
'''

#pad_width = 60
#pad_height = 60
#maxgeo = root_window.tk.call('wm', 'maxsize', '.')
#if type(maxgeo) == tuple:
#    fullsize = str(maxgeo[0]), str(maxgeo[1])
#else:
#    fullsize = maxgeo.split(' ')[0], maxgeo.split(' ')[1]
#width = str(int(fullsize[0]) - pad_width)
#height = str(int(fullsize[1]) - pad_height)
#x = str(pad_width/2)
#y = str(pad_height/2)
#print '\nAxis window is', width, 'x', height, 'and starts at', x, 'x', y, '\n'
#root_window.tk.call('wm', 'geometry', '.',width + 'x' + height + '+' + x + '+' + y)

# disable the 'do you want to close' dialog
root_window.tk.call('wm', 'protocol', '.', 'WM_DELETE_WINDOW', 'destroy .')

# set the view to Z
commands.set_view_z()

# set the default font and the gcode font
font = inifile.find("PLASMAC","FONT") or 'sans 10'
fname, fsize = font.split()
# default font
root_window.tk.call('font', 'configure', 'TkDefaultFont', '-family', fname, '-size', fsize)
# gcode font
root_window.tk.call('.pane.bottom.t.text', 'configure', '-height', '10','-font', font, '-foreground', 'blue')

# redo the text in tabs so they resize for the new default font
# manual tab
root_window.tk.call('.pane.top.tabs', 'itemconfigure', 'manual', '-text', ' Manual - F3 ')
# mdi tab
root_window.tk.call('.pane.top.tabs', 'itemconfigure', 'mdi', '-text', ' MDI - F5 ')
# preview tab
root_window.tk.call('.pane.top.right', 'itemconfigure', 'preview', '-text', ' Preview ')
# dro tab
root_window.tk.call('.pane.top.right', 'itemconfigure', 'numbers', '-text', ' DRO ')

# hide some widgets
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.spindlef')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.spindlel')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.coolant')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.flood')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.mist')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.space1')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.space2')
root_window.tk.call('grid','forget','.pane.top.spinoverride')
root_window.tk.call('grid','forget','.pane.top.tabs.fmanual.jogf.zerohome.tooltouch')

# change some widgets
root_window.tk.call('pack','forget','.pane.top.jogspeed.l0')
root_window.tk.call('pack','forget','.pane.top.jogspeed.l')
root_window.tk.call('pack','forget','.pane.top.jogspeed.l1')
root_window.tk.call('pack','forget','.pane.top.jogspeed.s')
root_window.tk.call('pack','forget','.pane.top.maxvel.l0')
root_window.tk.call('pack','forget','.pane.top.maxvel.l')
root_window.tk.call('pack','forget','.pane.top.maxvel.l1')
root_window.tk.call('pack','forget','.pane.top.maxvel.s')
root_window.tk.call('pack','.pane.top.jogspeed.s','-side','right')
root_window.tk.call('pack','.pane.top.jogspeed.l1','-side','right')
root_window.tk.call('pack','.pane.top.jogspeed.l','-side','right')
root_window.tk.call('pack','.pane.top.jogspeed.l0','-side','left')
root_window.tk.call('pack','.pane.top.maxvel.s','-side','right')
root_window.tk.call('pack','.pane.top.maxvel.l1','-side','right')
root_window.tk.call('pack','.pane.top.maxvel.l','-side','right')
root_window.tk.call('pack','.pane.top.maxvel.l0','-side','left')

# need a hal pin to disable config tab
# and some pins for gcode setting of some paramaters
h = hal.component('plasmac_panel')
h.newpin('config-disable',hal.HAL_BIT,hal.HAL_IN)
h.newpin('material-ext', hal.HAL_S32, hal.HAL_IN)
h.newpin('thc-enable-ext', hal.HAL_BIT, hal.HAL_IN)
h.newpin('use-auto-volts-ext', hal.HAL_BIT, hal.HAL_IN)
h.newpin('pierce-height-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('pierce-delay-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('cut-height-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('cut-feed-rate-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('cut-amps-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('cut-volts-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('puddle-jump-height-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.newpin('puddle-jump-delay-ext', hal.HAL_FLOAT, hal.HAL_IN)
h.ready()

########################################################################
#   gets widget information
#   uncomment any you need to look at, one or more at a time
#   lots more can be added

my_widget = [\
#'.pane',\
#'.pane.top',\
#'.pane.top.tabs',\
#'.pane.top.tabs.c',\
#'.pane.top.tabs.fmanual',\
#'.pane.top.tabs.fmanual.space1',\
#'.pane.top.tabs.fmanual.axis',\
#'.pane.top.tabs.fmanual.axes',\
#'.pane.top.tabs.fmanual.axes.axisx',\
#'.pane.top.tabs.fmanual.spindlel',\
#'.pane.top.tabs.fmanual.spindlef',\
#'.pane.top.right',\
#'.pane.top.right.fpreview',\
#'.pane.top.right.fnumbers',\
#'.pane.top.right.fnumbers.text',\
#'.pane.bottom',\
#'.pane.bottom.t',\
#'.pane.bottom.t.text',\
]
for widget in my_widget:
    print '\n********** BEGIN', widget, '**********'
    print '\nwidget', widget, 'is a', root_window.tk.call('winfo', 'class', widget)
    print '\nparent is:', root_window.tk.call('winfo', 'parent', widget)
    print '\nchildren are:'
    for item in root_window.tk.call('winfo', 'children', widget):
        print '  ', item
    print '\nvalid options are:'
    for item in range (len(root_window.tk.call(widget,'configure'))):
        print '  ', root_window.tk.call(widget,'configure')[item]
    print '\n********** END', widget, '**********\n'

########################################################################
